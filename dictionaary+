import java.util.*;
	//import java.awt.List;
	import java.io.*;
	
  /*comes to this class IfWrong if word doesn't already exist in dictionary.*/
	class IfWrong extends Spell_Checker{
		String wrongWord;
		int wordLength;
		public void generateMispellings(String wordCheck){
	         wrongWord=wordCheck;
	         try{
	             concatFL(wordCheck);  
	             concatLL(wordCheck);
	             replaceM(wordCheck);
	             deleteFL(wordCheck);
	             deleteLL(wordCheck);
	             //pluralize(wordCheck);  I haven't included these two functions in this code from the one we saw online
	             //transposition(wordCheck);
	         }
	         catch(StringIndexOutOfBoundsException e){ 
	             System.out.println();
	         }
	         catch(ArrayIndexOutOfBoundsException e){
	             System.out.println();
	         }
		} 
	         /**
	          * This method concats the word at the beginning of the word with each of the alphabet letters and checks if it is in the dictionary. 
	          * FL for first letter
	          * @param word the word being manipulated.
	          */
	         public void concatFL(String word){
	             char cur; // current character
	             String tempWord=""; // stores temp made up word
	             for(int i=97;i<123;i++){
	             cur=(char)i;//assign ASCII from index i value
	             tempWord+=cur;
	             //if the word is in the dictionary then add it to the possibilities list
	             tempWord=tempWord.concat(word); //add passed String to end of tempWord
	             checkDict(tempWord); //check to see if in dictionary
	             tempWord="";//reset temp word to contain nothing
	             }//end of for
	         }//end of concatFL

	         /**
	          * This concatenates the alphabet letters behind each of the word and checks if it is in the dictionary. LL for last letter.
	          * @param word the word being manipulated.
	          */
	         public void concatLL(String word){
	             char cur; // current character
	             String tempWord=""; // stores temp made up word
	             for(int i=123;i>97;i--){
	                 cur=(char)i;//assign ASCII from index i value
	                 tempWord=tempWord.concat(word); //add passed String to end of tempWord
	                 tempWord+=cur;
	                 //if the word is in the dictionary then add it to the possibilities list
	                 checkDict(tempWord);
	                 tempWord="";//reset temp word to contain nothing
	             }//end of for
	         }//end of concatLL
	         
	         /* method to replace letter by letter throughout the word with all letters and checks if in dictionary*/
	         public void replaceM(String word){
	        	 int wordLen=word.length();
	        	 char cur; // current character
	             int curi; //current letter index within the word
	             String tempWord=""; // stores temp made up word
	             for(curi=0;curi<wordLen;curi++) {
	            	 for(int i=97;i<123;i++){
	            		 cur=(char)i;//assign ASCII from index i value
	            		 tempWord=word.substring(0,curi)+cur+word.substring(curi+1);  
	            		 //System.out.println(tempWord);
	            		 checkDict(tempWord); //check to see if in dictionary
	            		 tempWord="";//reset temp word to contain nothing
	            	 }//end of for
	             }
	         }//end of replaceM

	         /**
	          * This deletes first letter and sees if it is in dictionary
	          * @param word the word being manipulated.
	          */
	         public void deleteFL(String word){
	             String tempWord=word.substring(1,word.length()-1); // stores temp made up word
	             checkDict(tempWord);
	             //print(possibilities);
	         }//end of deleteFL

	         /**
	          * This deletes last letter and sees if it is in dictionary
	          * @param word the word being manipulated.
	          */
	         public void deleteLL(String word){
	             String tempWord=word.substring(0,word.length()-1); // stores temp made up word
	             checkDict(tempWord);
	             //print(possibilities);
	         }//end of deleteLL
	         
           /*checks if generated word is in dictionary. if yes, prints to user saying this might be what they meant*/
	         public void checkDict(String inputWord) {
	        	 if(dictionary.contains(inputWord))
	 	            System.out.println("Correct word may be="+inputWord);
	         }
	}
	
  /*class to find metaphones. this is based on the metaphone rules given in Wikipedia page of Metaphone*/
	class Metaphone{
		/*method to simplify the given word using metaphone rules*/	
		void find_Metaphones(String word) //experimenting
		{
			String tempWord="" ;
			word=word.toUpperCase();
			tempWord=reduceDouble(word);
			if(tempWord.substring(0,1)=="KN"||tempWord.substring(0,1)=="GN"||tempWord.substring(0,1)=="PN"||tempWord.substring(0,1)=="AE"||tempWord.substring(0,1)=="WR")
				tempWord=tempWord.substring(1);
			if(tempWord.substring(tempWord.length()-1)=="MB")
				tempWord+="M";
			
			tempWord=reduceVowels(tempWord); //this has to be last step. do all other reductions based on rule before this.
			
		}
		
		//method to remove duplicate letters except CC
		String reduceDouble(String word) {
			String tempWord="";
			for(int curi=0;curi<word.length()-1;curi++)
			{
				tempWord+=word.substring(curi,curi);
				if(word.substring(curi,curi)==word.substring(curi+1,curi+1))
					if(word.substring(curi,curi)!="C") 
						curi++;
			}
			return tempWord;
		}
		
		//method to reduce vowels. we have to eliminate all the vowels except if they are the first letter.
		String reduceVowels(String word) {
			String letter;
			String tempWord="";
			for(int curi=1;curi<word.length();curi++) //curi is current letter index
			{
				letter=word.substring(curi,curi);
				if(letter=="A"||letter=="E"||letter=="I"||letter=="O"||letter=="U")
					continue; //don't add the vowel into new word
				else
					tempWord+=letter;
			}
			return tempWord;
		}
	}
	
	
	public class Spell_Checker{
	    public static HashSet<String> dictionary;
	    String inputWord;
	     public static void main(String []args){
	        System.out.println("starting...");
	        setup();
	        check();
	     }
	     
	     static void setup()
	     {
	        int tableSIZE=13;
	        dictionary = new HashSet<String>(tableSIZE);
	        try {
	            BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\ADE152\\Documents\\dictionary.txt"));
	            String line = null; 
	            while((line = bufferedReader.readLine()) != null) {
	                dictionary.add(line);
	            }
	            bufferedReader.close(); //close file        
	        }
	        catch(FileNotFoundException ex) {
	            ex.printStackTrace();//print error             
	        }
	        catch(IOException ex) {
	            ex.printStackTrace();//print error
	        }
	     }
	     
	     static void check()
	     {
	    	String inputWord;
	        Scanner sc=new Scanner(System.in);
	        System.out.println("Enter word :");
	        inputWord=sc.next();
	        //long t1=System.nanoTime();
	        if(dictionary.contains(inputWord))
	            System.out.println("Exists!");
	        else
	        {
	        	System.out.println("Doesn't exist.");
	        	IfWrong obj=new IfWrong();
	        	obj.generateMispellings(inputWord);
	        }
	        //long t2=System.nanoTime();
        	//System.out.println("time="+(t2-t1));
	     }
	}

